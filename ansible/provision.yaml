---
- name: Provision system
  hosts: localhost
  gather_facts: true
  become: true
  become_user: root
  any_errors_fatal: true
  vars:  # FIXME; should have a pre_task for user provided values.
    system_user: darianculver  # Change this line as needed.
    git_email: "culver.darian@gmail.com"
    git_author: "Darian Culver"
  debugger: 'on_failed'

  pre_tasks:

    # Note: Ubuntu is not 'natively' supported - largely CI only.
    - name: Check if 'os_family' is supported
      ansible.builtin.assert:
        that:
          - "{{ ansible_facts.os_family in ('Debian', 'Ubuntu') }}"
        fail_msg: "Error! '{{ ansible_facts.os_family }}' is not supported!"
        success_msg: "'{{ ansible_facts.os_family }}' is supported."
      tags: ['always', 'os_family']

    - name: Check system_user exists
      debugger: always
      ansible.builtin.command:
        cmd: id {{ system_user }}
      register: user_state
      changed_when: user_state.rc
      failed_when: user_state.rc != 0
      tags: ['always', 'user']

    # FIXME - consider this for managing users on init?
    # https://docs.ansible.com/ansible/latest/collections/ansible \
    # /builtin/user_module.html

    - name: Check configured dpkg architectures
      become: true
      ansible.builtin.command:
        cmd: dpkg --print-foreign-architectures
      register: configured_architectures
      changed_when: configured_architectures.rc == 0
      tags: ['always', 'apt']

    - name: Configure i386 as a valid architecture
      become: true
      ansible.builtin.command:
        cmd: dpkg --add-architecture i386
      register: dpkg_architectures
      when: "'i386' not in configured_architectures.stdout_lines"
      changed_when: dpkg_architectures.rc == 0
      tags: ['always', 'apt']

    - name: Update apt-cache
      ansible.builtin.apt:
        clean: true
        update_cache: true
      tags: ['always', 'apt', 'cache']

    - name: Upgrade default packages
      ansible.builtin.apt:
        upgrade: "safe"
      tags: ['apt', 'upgrade']

  tasks:

    - name: Ensure SSH directory exists
      ansible.builtin.file:
        dest: "/home/{{ system_user }}/.ssh/"
        group: "{{ system_user }}"
        owner: "{{ system_user }}"
        mode: "0700"
        state: directory
      tags: ['always', 'ssh']

    - name: Deploy Public
      ansible.builtin.copy:
        src: vault/public
        dest: "/home/{{ system_user }}/.ssh/id_rsa.pub"
        group: "{{ system_user }}"
        owner: "{{ system_user }}"
        mode: "0644"
      tags: ['ssh', 'pub']

    - name: Deploy Private
      ansible.builtin.copy:
        src: vault/private
        dest: "/home/{{ system_user }}/.ssh/id_rsa"
        group: "{{ system_user }}"
        owner: "{{ system_user }}"
        mode: "0600"
      tags: ['ssh', 'priv']

    - name: Install packages from default repositories
      ansible.builtin.apt:
        install_recommends: false
        name:
          - git
          - vim
          - ca-certificates
          - curl
          - dpkg
          - sudo  # Required for 'become' to work.
          - jq
          - yq
          - python3-pip
          - keepassxc  # TODO - Need a solution for pull key dbs.
      tags: ['always', 'apt', 'install']

    - name: Create keyrings directory
      ansible.builtin.file:
        owner: root
        group: root
        mode: "0755"
        path: /etc/apt/keyrings
        state: directory
      tags: ['always', 'apt', 'keyring']

    - name: Install Docker keyring
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/{{
          ansible_facts.os_family | lower }}/gpg"
        owner: root
        group: root
        mode: "0644"
        dest: /etc/apt/keyrings/docker.asc
      tags: ['keyring', 'docker']

    - name: Setup Docker source
      ansible.builtin.template:
        src: templates/docker-source.j2
        dest: /etc/apt/sources.list.d/docker.list
        owner: root
        group: root
        mode: "0644"
      tags: ['source', 'apt', 'docker']

    - name: Install Docker
      ansible.builtin.apt:
        clean: true
        update_cache: true
        install_recommends: false
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
      tags: ['apt', 'docker']

    - name: Add user to the Docker group
      become: true
      ansible.builtin.command:
        cmd: usermod -aG docker {{ system_user }}
      register: docker_usermod
      changed_when: docker_usermod.rc == 0
      tags: ['apt', 'docker', 'user']

    - name: Install Spotify keyring
      ansible.builtin.get_url:
        url: "https://download.spotify.com/debian/pubkey_6224F9941A8AA6D1.gpg"
        owner: root
        group: root
        mode: "0644"
        dest: /etc/apt/keyrings/spotify.asc
      tags: ['keyring', 'spotify']

    - name: Setup Spotify source
      ansible.builtin.template:
        src: templates/spotify-source.j2
        dest: /etc/apt/sources.list.d/spotify.list
        owner: root
        group: root
        mode: "0644"
      tags: ['source', 'apt', 'spotify']

    - name: Install Spotify
      ansible.builtin.apt:
        clean: true
        update_cache: true
        install_recommends: false
        name:
          - spotify-client
      tags: ['apt', 'spotify']

    - name: Install Codium keyring
      ansible.builtin.get_url:
        url:
          "https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/\
          raw/master/pub.gpg"
        owner: root
        group: root
        mode: "0644"
        dest: /etc/apt/keyrings/codium.asc
      tags: ['keyring', 'codium']

    - name: Setup Codium source
      ansible.builtin.template:
        src: templates/codium-source.j2
        dest: /etc/apt/sources.list.d/codium.list
        owner: root
        group: root
        mode: "0644"
      tags: ['source', 'apt', 'codium']

    - name: Install Codium
      ansible.builtin.apt:
        clean: true
        update_cache: true
        install_recommends: false
        name:
          - codium
      tags: ['apt', 'codium']

    - name: Ensure Codium config directory tree is present
      ansible.builtin.file:
        state: directory
        owner: "{{ system_user }}"
        group: "{{ system_user }}"
        path: "/home/{{ system_user }}/.config/VSCodium/User"
        recurse: true
      tags: ['codium', 'settings']

    - name: Install Codium settings
      ansible.builtin.copy:
        src: vscode/settings.json
        dest: "/home/{{ system_user }}/.config/VSCodium/User/settings.json"
        owner: "{{ system_user }}"
        group: "{{ system_user }}"
        mode: "0644"
      tags: ['codium', 'settings']

    - name: Install Codium keybindings
      ansible.builtin.copy:
        src: vscode/keybindings.json
        dest: "/home/{{ system_user }}/.config/VSCodium/User/keybindings.json"
        owner: "{{ system_user }}"
        group: "{{ system_user }}"
        mode: "0644"
      tags: ['codium', 'settings']

    - name: Determine installed Codium extensions
      become_user: "{{ system_user }}"
      become: true
      ansible.builtin.command:
        cmd: codium --list-extensions
      register: installed_extensions
      changed_when: installed_extensions.stdout_lines | length > 0
      tags: ['codium', 'extensions']

    - name: Determine Codium extensions to install
      become_user: "{{ system_user }}"
      become: true
      ansible.builtin.command:
        cmd: cat vscode/extensions.txt
      register: extensions_to_install
      changed_when: extensions_to_install.rc == 0
      tags: ['codium', 'extensions']

    - name: Install required Codium extensions
      become_user: "{{ system_user }}"
      become: true
      ansible.builtin.command:
        cmd: codium --install-extension {{ item }}
      register: extension_install_process
      with_items: "{{ extensions_to_install.stdout_lines | difference(installed_extensions.stdout_lines) }}"  # yamllint disable-line rule:line-length
      changed_when: extension_install_process.rc == 0
      tags: ['codium', 'extensions']

    - name: Install nVidia prerequisite drivers
      become: true
      ansible.builtin.apt:
        clean: true
        update_cache: true
        install_recommends: false
        name:
          - linux-headers-amd64
      tags: ['nvidia', 'apt', 'steam']

    # FIXME - can result in duplicate apt source warnings
    - name: Replace apt sources.list for nVidia drivers
      ansible.builtin.template:
        src: templates/sources.j2
        dest: /etc/apt/sources.list
        owner: root
        group: root
        mode: "0644"
      tags: ['source', 'apt', 'nvidia', 'steam']

    - name: Install nVidia drivers
      become: true
      ansible.builtin.apt:
        clean: true
        update_cache: true
        install_recommends: true  # Just install defaults - risky install.
        name:
          - nvidia-driver=535.183.01-1~deb12u1  # Would be nice to pin releases.
          - nvidia-driver-libs:i386=535.183.01-1~deb12u1
      tags: ['nvidia', 'apt', 'steam']

    - name: Install Vulkan/32-bit dependencies
      become: true
      ansible.builtin.apt:
        clean: true
        update_cache: true
        install_recommends: false
        name:
          - mesa-vulkan-drivers
          - libglx-mesa0:i386
          - mesa-vulkan-drivers:i386
          - libgl1-mesa-dri:i386
          - libgl1-mesa-glx:i386
      tags: ['apt', 'steam', 'vulkan']

    - name: Install Steam
      become: true
      ansible.builtin.apt:
        clean: true
        update_cache: true
        install_recommends: false
        name:
          - steam-installer
      tags: ['apt', 'steam']

    - name: Check if using gnome
      ansible.builtin.command:
        cmd: apt policy gnome
      register: gnome_status
      changed_when: gnome_status.rc == 0
      tags: ['apt', 'gnome']

    - name: Set up Dashboard favorites
      vars:
        check_string: "Installed: (none)"  # deal w/inline YAML tag (:).
      ansible.builtin.command:
        cmd: >-
          gsettings set org.gnome.shell favorite-apps
          "[
          'org.gnome.Nautilus.desktop',
          'firefox-esr.desktop',
          'org.gnome.Terminal.desktop',
          'codium.desktop',
          'spotify.desktop',
          'steam.desktop',
          'org.keepassxc.KeePassXC.desktop'
          ]"
      register: dashboard_favorites
      changed_when: dashboard_favorites.rc == 0
      when: gnome_status.stdout_lines[1] | trim != check_string
      tags: ['apt', 'gnome']

    - name: Set up git config
      tags: ['git']
      block:  # FIXME; we should use the git module, but this works for now.
        - name: Define username  # noqa: command-instead-of-module
          ansible.builtin.command:
            cmd: git config --global user.name "{{ git_author }}"
          register: git_set_username
          changed_when: git_set_username.rc == 0

        - name: Define email  # noqa: command-instead-of-module
          ansible.builtin.command:
            cmd: git config --global user.email "{{ git_email }}"
          register: git_set_email
          changed_when: git_set_email.rc == 0
